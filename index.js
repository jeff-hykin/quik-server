//
// Library Imports
//
const fs      = require("fs")
const express = require("express")
const Parcel  = require("@parcel/core").default
const { makeSureModuleExists, absolutePath, makeAwaitable } = require("./helpers")

Parcel  = require("@parcel/core").default

bundler = new Parcel({
    entries: 'a.js',
    defaultConfig: '@parcel/config-default'
})

;((async ()=>{
    try {
        let {bundleGraph, buildTime} = await bundler.run();
        let bundles = bundleGraph.getBundles();
        console.log(`✨ Built ${bundles.length} bundles in ${buildTime}ms!`);
    } catch (err) {
        console.debug(`err is:`,err)
        console.log(err.diagnostics);
    }
})())


// 
// Quik manager
//
let quikModuleManager = {
    argsKey : Symbol("args"),
    moduleNameKey : Symbol("moduleName"),
    frontendGlobals : {},
    backendGlobals : {},
    list : [],
    quikAdd : (moduleName, ...args) => {
        makeSureModuleExists(moduleName)
        let eachModule = require(moduleName)
        // attach the name and args to the module
        eachModule[quikModuleManager.argsKey] = args
        eachModule[quikModuleManager.moduleNameKey] = moduleName
        // add them to the module list
        quikModuleManager.list.push(eachModule)
        return eachModule
    },
    runAll : (callbackName) => {
        // for each module 
        for (let each of quikModuleManager.list) {
            // see if it has the callback
            if (each[callbackName] instanceof Function) {
                // if it does then run it with app and args
                let args = each[quikModuleManager.argsKey]
                each[callbackName](app, ...args)
            }
        }
    },
}

// 
// 
// setup app obj
// 
// 
let app = Object.assign(express(), {
    server : null,
    quikAdd : quikModuleManager.quikAdd,
    start: async () => {
        // if there isnt a server, then use http and attach it to the app object
        if (app.server == null) {
            app.server = require('http').createServer(app)
        }
        // 
        // setup middleware
        // 
        await makeAwaitable(app.settings.systemMiddlewareSetup())
        await makeAwaitable(app.settings.afterSystemMiddlewareSetup())
        // 
        // setup frontend
        // 
        // get the string of the frontend
        let frontendCode = await makeAwaitable(app.settings.systemFrontendSetup())
        await makeAwaitable(app.settings.afterSystemFrontendSetup())
        // create the files for the frontend
        let pathToHtmlEntrypoint = app.settings.generateFrontendFiles(app.settings.websiteFile, app.settings.computerGeneratedFolder, frontendCode)
        // 
        // setup bundler
        // 
        await makeAwaitable(app.settings.systemBundlerSetup(pathToHtmlEntrypoint, app.settings.computerGeneratedFolder, app.settings.bundlerOptions))
        await makeAwaitable(app.settings.afterSystemBundlerSetup())
        // 
        // start server
        // 
        app.server.listen(app.settings.port, app.settings.port, (...args)=>{
            quikModuleManager.runAll("afterServerStarted")
            app.settings.afterServerStarted(...args)
        })
    },
})
let defaultSettings = {
    port: 3000,
    host: 'localhost',
    websiteFile: "./website.jsx",
    codeFolder: "./code",
    computerGeneratedFolder: "./computerGeneratedCode",
    bundlerOptions: {},
    // 
    // 
    // runtime setups
    // 
    //
        // 
        // middleware
        // 
        afterSystemMiddlewareSetup : async () => {}, // nothing (let user override this)
        systemMiddlewareSetup : async () => {
            // default middleware
            app.use(express.json())
            app.use(express.urlencoded({ extended: false }))
            // run all the middleware
            quikModuleManager.runAll("onMiddlewareSetup")
        },
        // 
        // Frontend
        // 
        afterSystemFrontendSetup : async () => {}, // nothing (let user override this)
        systemFrontendSetup : async () => {
            let frontendCode = "let quik = require('quik-client')"
            for (let each of quikModuleManager.list) {
                // if the module has a frontend generator function 
                if (each.generateFrontend instanceof Function) {
                    // go ahead and generate the frontend code
                    let code = await makeAwaitable(each.generateFrontend(app, ...each[quikModuleManager.argsKey]))
                    // TODO: add warning here if code is not a string
                    // concat the output
                    frontendCode += `\n;;(async()=>{\n${code}\n})();;\n`
                }
            }
            return frontendCode
        },
        generateFrontendFiles : (filePathForWebsiteJavascriptEntrypoint, folderPathForAutoGeneratedFiles, frontendCodeAsString) => {
            // Create the JS file
            let jsLibraryLocation = `${folderPathForAutoGeneratedFiles}/special.js`
            fs.writeFile(absolutePath(jsLibraryLocation), frontendCodeAsString, err => err && console.log(err))
            // create the html file
            let locationOfHtml = `${folderPathForAutoGeneratedFiles}/.website.html`
            fs.writeFile(absolutePath(locationOfHtml), `<body></body><script src="../${jsLibraryLocation}"></script><script src="../${filePathForWebsiteJavascriptEntrypoint}"></script>`, err => err && console.log(err))
            return locationOfHtml
        },
        // 
        // Bundler
        // 
        afterSystemBundlerSetup : async () => {}, // nothing (let user override this)
        systemBundlerSetup : async (pathToHtmlEntrypoint, pathToAutoGeneratedFolder, bundlerOptionsObj) => {
            app.use(express.static(pathToAutoGeneratedFolder))
            
            let bundler = new Parcel({
                defaultConfig: '@parcel/config-default',
                entries: "index.js",
                // serveOptions: false,
                // shouldAutoInstall: true,
                // cacheDir: absolutePath(`${combinedSettings.computerGeneratedFolder}/.cache`),
                // defaultTargetOptions: {
                //     engines: {
                //         browsers: ['last 1 Chrome version']
                //     }
                // },
                // targets: {
                //     disDir: absolutePath(`${combinedSettings.computerGeneratedFolder}/dist`),
                //     distEntry: absolutePath('index.html')
                // },
            })
var result
;((async ()=>{
    result = await bundler.run()
})())
            try {
                let {bundleGraph, buildTime} = await bundler.watch()
                let bundles = bundleGraph.getBundles()
                console.log(`✨ Built ${bundles.length} bundles in ${buildTime}ms!`)
            } catch (err) {
                console.log(err.diagnostics)
            }

            // Let express use the bundler middleware, this will let Parcel handle every request over your express server
            app.use(bundler.middleware())
            // run all 
            quikModuleManager.runAll("afterBundlerSetup")
        },
        // 
        // Server start
        //
        afterServerStarted : async (...args) => {
            console.log(`Server running on ${app.settings.host}:${app.settings.port}`)
        },
}
//
// Create the "settings" setter and getter for app
//
var combinedSettings = Object.assign(defaultSettings, app.settings)
Object.defineProperty(app, "settings", {
    get: ()=>combinedSettings,
    // override old settings with new settings
    set: (newValue) => Object.assign(combinedSettings, newValue)
})

module.exports = app